import {EllipsisOutlined, PlusOutlined} from '@ant-design/icons';
import {ActionType, ProColumns} from '@ant-design/pro-components';
import {PageContainer, ProTable, TableDropdown} from '@ant-design/pro-components';
import {Button, Dropdown, Space, Tag} from 'antd';
import {useRef} from 'react';
import request from 'umi-request';

export const waitTimePromise = async (time = 100) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(true);
    }, time);
  });
};

export const waitTime = async (time = 100) => {
  await waitTimePromise(time);
};


const columns = [
  {
    dataIndex: 'index',
    valueType: 'indexBorder',
    width: 48,
  },
  {
    title: 'title',
    dataIndex: 'title',
    copyable: true,
    ellipsis: true,
    tip: 'If the title is too long, it will automatically shrink',
    formItemProps: {
      rules: [
        {
          required: true,
          message: 'This is required',
        },
      ],
    },
  },
  {
    disable: true,
    title: 'state',
    dataIndex: 'state',
    filters: true,
    onFilter: true,
    ellipsis: true,
    valueType: 'select',
    valueEnum: {
      all: {text: 'super long'.repeat(50)},
      open: {
        text: 'unsolved',
        status: 'Error',
      },
      closed: {
        text: 'solved',
        status: 'Success',
        disabled: true,
      },
      processing: {
        text: 'Solving',
        status: 'Processing',
      },
    },
  },
  {
    disable: true,
    title: 'Label',
    dataIndex: 'labels',
    search: false,
    renderFormItem: (_, {defaultRender}) => {
      return defaultRender(_);
    },
    render: (_, record) => (
      <Space>
        {record.labels.map(({name, color}) => (
          <Tag color={color} key={name}>
            {name}
          </Tag>
        ))}
      </Space>
    ),
  },
  {
    title: 'creation time',
    key: 'showTime',
    dataIndex: 'created_at',
    valueType: 'date',
    sorter: true,
    hideInSearch: true,
  },
  {
    title: 'creation time',
    dataIndex: 'created_at',
    valueType: 'dateRange',
    hideInTable: true,
    search: {
      transform: (value) => {
        return {
          startTime: value[0],
          endTime: value[1],
        };
      },
    },
  },
  {
    title: 'operate',
    valueType: 'option',
    key: 'option',
    render: (text, record, _, action) => [
      <a
        key="editable"
        onClick={() => {
          action?.startEditable?.(record.id);
        }}
      >
        edit
      </a>,
      <a href={record.url} target="_blank" rel="noopener noreferrer" key="view">
        Check
      </a>,
      <TableDropdown
        key="actionGroup"
        onSelect={() => action?.reload()}
        menus={[
          {key: 'copy', name: 'copy'},
          {key: 'delete', name: 'delete'},
        ]}
      />,
    ],
  },
];


const List = () => {
  const actionRef = useRef();
  return (
    <ProTable
      columns={columns}
      actionRef={actionRef}
      cardBordered
      // request={async (params = {}, sort, filter) => {
      //   console.log(sort, filter);
      //   await waitTime(2000);
      //   // return request < {
      //   //   data
      //   // } > ('https://proapi.azurewebsites.net/github/issues', {
      //   //   params,
      //   // });
      //
      //   return request('https://proapi.azurewebsites.net/github/issues', {
      //     params,
      //   });
      // }}

      request={ (params = {}, sort, filter) => {
        console.log(sort, filter);
        // await waitTime(2000);
        // return request < {
        //   data
        // } > ('https://proapi.azurewebsites.net/github/issues', {
        //   params,
        // });

        return  request('https://proapi.azurewebsites.net/github/issues', {
          params,
        });
      }}

      // editable={{
      //   type: 'multiple',
      // }}
      // columnsState={{
      //   persistenceKey: 'pro-table-singe-demos',
      //   persistenceType: 'localStorage',
      //   onChange(value) {
      //     console.log('value: ', value);
      //   },
      // }}
      rowKey="id"
      search={{
        labelWidth: 'auto',
      }}
      options={{
        setting: {
          listsHeight: 400,
        },
      }}
      // form={{
      //    // Due to the configuration of transform, the submitted participation is different from the definition. Here we need to transform
      //    syncToUrl: (values, type) => {
      //      if (type === 'get') {
      //        return {
      //          ...values,
      //          created_at: [values.startTime, values.endTime],
      //        };
      //      }
      //      return values;
      //    },
      //    // syncToUrl: true,
      // }}
      pagination={{
        pageSize: 5,
        onChange: (page) => console.log(page),
      }}
      dateFormatter="string"
      headerTitle="advanced form"
      toolBarRender={() => [
        <Button
          key="button"
          icon={<PlusOutlined/>}
          onClick={() => {
            actionRef.current?.reload();
          }}
          type="primary"
        >
          new build
        </Button>,
        <Dropdown
          key="menu"
          menu={{
            items: [
              {
                label: '1st item',
                key: '1',
              },
              {
                label: '2nd item',
                key: '1',
              },
              {
                label: '3rd item',
                key: '1',
              },
            ],
          }}
        >
          <Button>
            <EllipsisOutlined/>
          </Button>
        </Dropdown>,
      ]}
    />
  );
};

export default List;
