import {
  PageContainer,
  FooterToolbar,
  ProCard,
  ProForm,
  ProFormCheckbox,
  ProFormDatePicker,
  ProFormDateRangePicker,
  ProFormDigit,
  ProFormSelect,
  ProFormText,
  StepsForm,
  ProFormDependency,
  ProFormList,
  ProFormGroup,
} from '@ant-design/pro-components';
import { Row, Col, Space, message, Button, Form } from 'antd';
import { UserOutlined } from '@ant-design/icons';

const waitTime = (time = 100) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(true);
    }, time);
  });
};

const Create = () => {

  const initialValues = {
    organization:{
      step_01: {
        profile_details: {
          name: 'This is initial title',
          type: '',
          registration_number: '',
        },
        contact_details: {
          phone_number: '',
          email: '',
          website: '',
          person: ['Wu Jiahao', 'Zhou Xingxing'],
        },
      },
      step_02: {
        policies: [
          { policy_id: 1, policy_seats: 2},
          { policy_id: 4, policy_seats: 4}
        ],
      },
    },
  };


  return (
    <PageContainer>
      <StepsForm
        onFinish={async (values) => {
          console.log(values);
          await waitTime(1000);
          message.success('Submitted successfully');
        }}
        formProps={{
          validateMessages: {
            required: 'This is required',
          },
        }}
        submitter={{
          render: (_, dom) => <FooterToolbar>{dom}</FooterToolbar>,
        }}
      >
        <StepsForm.StepForm
          name="business_details"
          title="Business Details"
          onFinish={async () => {
            await waitTime(2000);
            return true;
          }}
          layout='vertical'
          grid={true}
          // rowProps={{
          //   gutter: [16],
          // }}
          initialValues={initialValues}
        >
          <ProCard
            title="Organization Details"
            bordered
            headerBordered
            collapsible
            size="default"
            type="default"
            style={{
              marginBlockEnd: 15,
              minWidth: 800,
              maxWidth: '100%',
            }}
            onCollapse={(collapse) => console.log(collapse)}
          >
            <ProForm.Group size={24}>
              <ProFormText
                name={['organization', 'step_01', 'profile_details', 'name']}
                label="Name"
                tooltip="The legal name of the organization"
                placeholder="please enter your organization legal name"
                rules={[{ required: true }]}
                // initialValue="Testing Title of organization..."
                fieldProps={{
                  prefix: <UserOutlined />,
                  size: 'large',

                  onChange: (e) => {
                    console.log('e.target.value');
                    console.log(e.target.value);
                  }
                }}
                colProps={{ span: 24 }}
              />
            </ProForm.Group>
            <ProForm.Group size={24}>
              <ProFormSelect
                name={['organization', 'step_01', 'profile_details', 'type']}
                label="Type"
                showSearch
                debounceTime={300}
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
                options={['Nursing Agency', 'Domiciliary Care', 'Nursing Agency and Domiciliary Care (Combined)', 'Supported Living']}
                // rules={[{ required: true, message: 'Please select your organization type!' }]}
              />
              <ProFormDigit
                label="Regisreation No."
                name={['organization', 'step_01', 'profile_details', 'registration_number']}
                placeholder="5453-763876-7686"
                maxLength={20}
                min={1}
                max={10}
                fieldProps={{ precision: 0 }}
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
              />
            </ProForm.Group>
          </ProCard>

          <ProCard
            title="Contact Details"
            bordered
            headerBordered
            collapsible
            size="default"
            type="inner"
            style={{
              marginBlockEnd: 15,
              minWidth: 800,
              maxWidth: '100%',
            }}
          >
            <ProForm.Group size={24}>
              <ProFormText
                label="Phone No."
                name={['organization', 'step_01', 'contact_details', 'phone_number']}
                placeholder="+2974837487 etc."
                // min={1}
                // max={10}
                fieldProps={{ precision: 0 }}
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
              />
              <ProFormText
                label="Email"
                name={['organization', 'step_01', 'contact_details', 'email']}
                tooltip="The legal name of the organization"
                placeholder="info@example.com etc."
                // rules={[{ required: true }]}
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
              />
            </ProForm.Group>
            <ProForm.Group size={24}>
              <ProFormText
                label="Website"
                name={['organization', 'step_01', 'contact_details', 'website']}
                tooltip="The legal name of the organization"
                placeholder="http://example.com"
                // rules={[{ required: true }]}
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
              />
              <ProFormSelect
                name={['organization', 'step_01', 'contact_details', 'person']}
                label="Contact person:"
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
                fieldProps={{
                  mode: 'tags',
                }}
                // initialValue={['Wu Jiahao', 'Zhou Xingxing']}
                options={['Wu Jiahao', 'Zhou Xingxing', 'Chen Lafeng'].map((item) => ({
                  label: item,
                  value: item,
                }))}
              />
            </ProForm.Group>
          </ProCard>
        </StepsForm.StepForm>

        <StepsForm.StepForm
          name="policies"
          title="Policies"
          layout='vertical'
          grid={true}
          // rowProps={{
          //   gutter: [16],
          // }}
          initialValues={initialValues}
        >
          <ProCard
            title="Polices Association:"
            bordered
            headerBordered
            collapsible
            size="default"
            type="inner"
            style={{
              minWidth: 800,
              marginBlockEnd: 16,
              maxWidth: '100%',
            }}
          >


            {/*Start ProForm Dependency Example*/}
            <ProForm.Group title="Policies" size={24}>
              <ProFormList
                name={['organization', 'step_02', 'policies']}
              >
                <ProForm.Group key="group" size={24}>
                  <ProFormSelect
                    name='policy_id'
                    label="Policy"
                    colProps={{ xs: 24, sm:24, md: 18, lg: 18, xl: 18 }}
                    fieldProps={{
                      mode: 'tags',
                    }}
                    options={[
                      {value:1, label:'policy 01' },
                      {value:2, label:'policy 02' },
                      {value:3, label:'policy 03' },
                      {value:4, label:'policy 04' },
                    ]
                      // .map(({k, v}) => ({
                      //   value: k,
                      //   label: v,
                      // }))
                    }
                  />
                  <ProFormDigit
                    name='policy_seats'
                    label="Seats"
                    placeholder="5453-763876-7686"
                    maxLength={20}
                    min={1}
                    max={10}
                    fieldProps={{ precision: 0 }}
                    colProps={{ xs: 24, sm:24, md: 6, lg: 6, xl: 6 }}
                  />
                </ProForm.Group>
              </ProFormList>
            </ProForm.Group>
          {/*End ProForm Dependency Example*/}

            {/*Start ProFormDependency Nested Example */}
            <ProFormSelect
              options={[
                {
                  value: 'select',
                  label: 'selection box',
                },
                {
                  value: 'input',
                  label: 'Input box',
                },
              ]}
              width="xs"
              name="globalUseMode"
              label="The type of the component that takes effect globally"
            />
            <ProFormList
              name={['default', 'users']}
              label="User Info"
              initialValue={[
                {
                  name: '1111',
                },
              ]}
              alwaysShowItemLabel
            >
              <ProForm.Group key="group">
                <ProFormSelect
                  options={[
                    {
                      value: 'select',
                      label: 'selection box',
                    },
                    {
                      value: 'input',
                      label: 'Input box',
                    },
                  ]}
                  width="xs"
                  name="useMode"
                  label="The type of component that takes effect"
                />
                <ProFormDependency name={['useMode']}>
                  {({ useMode }) => {
                    if (useMode === 'select') {
                      return (
                        <ProFormSelect
                          options={[
                            {
                              value: 'chapter',
                              label: 'Effective after stamping',
                            },
                          ]}
                          width="md"
                          name="function"
                          label="Effective way"
                        />
                      );
                    }
                    return (
                      <ProFormText width="md" name="function" label="Effective way" />
                    );
                  }}
                </ProFormDependency>

                <ProFormDependency
                  key="globalUseMode"
                  name={['globalUseMode']}
                  ignoreFormListField
                >
                  {({ globalUseMode }) => {
                    if (globalUseMode === 'select') {
                      return (
                        <ProFormSelect
                          options={[
                            {
                              value: 'chapter',
                              label: 'Effective after stamping',
                            },
                          ]}
                          width="md"
                          name="gfunction"
                          label="Effective way of outer layer linkage"
                        />
                      );
                    }
                    return (
                      <ProFormText
                        width="md"
                        name="gfunction"
                        label="Effective way of outer layer linkage"
                      />
                    );
                  }}
                </ProFormDependency>
              </ProForm.Group>
            </ProFormList>
            {/*End ProFormDependency Nested Example */}


            <ProFormCheckbox.Group
              name="checkbox"
              label="migration type"
              width="lg"
              options={['Structure Migration', 'Full Migration', 'Incremental Migration', 'Full Verification']}
            />
            <ProForm.Group>
              <ProFormText name="dbname" label="Business DB username" />
              <ProFormDatePicker
                name="datetime"
                label="record keeping time"
                width="sm"
              />
            </ProForm.Group>
            <ProFormCheckbox.Group
              name="checkbox"
              label="migration type"
              options={['Full LOB', 'Not synchronized LOB', 'Restricted LOB']}
            />
          </ProCard>
        </StepsForm.StepForm>
        <StepsForm.StepForm name="super_users" title="Super Users">
          <ProCard
            style={{
              marginBlockEnd: 16,
              minWidth: 800,
              maxWidth: '100%',
            }}
          >
            <ProFormCheckbox.Group
              name="checkbox"
              label="deployment unit"
              rules={[
                {
                  required: true,
                },
              ]}
              options={['Deployment Unit 1', 'Deployment Unit 2', 'Deployment Unit 3']}
            />
            <ProFormSelect
              label="Deploy Grouping Policies"
              name="remark"
              rules={[
                {
                  required: true,
                },
              ]}
              width="md"
              initialValue="1"
              options={[
                {
                  value: '1',
                  label: 'strategy one',
                },
                { value: '2', label: 'Strategy two' },
              ]}
            />
            <ProFormSelect
              label="Pod Scheduling Policy"
              name="remark2"
              width="md"
              initialValue="2"
              options={[
                {
                  value: '1',
                  label: 'strategy one',
                },
                { value: '2', label: 'Strategy two' },
              ]}
            />
          </ProCard>
        </StepsForm.StepForm>
        <StepsForm.StepForm name="staff_members" title="Staff members">
          <ProCard
            style={{
              marginBlockEnd: 16,
              minWidth: 800,
              maxWidth: '100%',
            }}
          ></ProCard>
        </StepsForm.StepForm>
      </StepsForm>
    </PageContainer>
  );
};

export default Create;
