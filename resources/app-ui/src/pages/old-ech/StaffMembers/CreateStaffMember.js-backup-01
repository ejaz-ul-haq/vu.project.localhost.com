import {
  PageContainer,
  FooterToolbar,
  ProCard,
  ProForm,
  ProFormCheckbox,
  ProFormDatePicker,
  ProFormDateRangePicker,
  ProFormDigit,
  ProFormSelect,
  ProFormText,
  StepsForm,
  ProFormDependency,
  ProFormList,
  ProFormGroup,
  ProFormRadio,
  ProFormSegmented,
} from '@ant-design/pro-components';
import { Row, Col, Space, message, Button, Form } from 'antd';
import { UserOutlined } from '@ant-design/icons';

import {createUser} from "@/services/wp-api/User";


const waitTime = (time = 100) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(true);
    }, time);
  });
};


const onFinishHandlerStepsForm =   (values) => {
  console.log('onFinishHandlerStepsForm');
  console.log('Received values of form: ', values);

  const createStaffMember = async () => {
    try {
      const msg =  createUser({
        first_name: values?.staff_member?.step_01?.bio_details?.first_name,
        last_name: values?.staff_member?.step_01?.bio_details?.last_name,
        name: values?.staff_member?.step_01?.bio_details?.first_name+' '+values?.staff_member?.step_01?.bio_details?.middle_name+' '+values?.staff_member?.step_01?.bio_details?.last_name,
        email: values?.staff_member?.step_01?.contact_details?.email,
        // username: values?.staff_member?.step_02?.account_details?.username,
        username: values?.staff_member?.step_01?.contact_details?.email,
        password: values?.staff_member?.step_02?.account_details?.password,
        // roles: ['ech_super_user'],
        roles: 'ech_staff_member',
      });
      // return msg.data;
      return msg;
    } catch (error) {
      console.log('createStaffMember - error');
      console.log(error);
      // history.push(loginPath);
    }
    return undefined;
  };

  const staffMemberCreated = createStaffMember();
  console.log('staffMemberCreated');
  console.log(staffMemberCreated);

};

const CreateStaffMember = () => {

  const initialValues = {
    staff_member:{
      step_01: {
        bio_details: {
          first_name: '',
          middle_name: '',
          last_name: '',
          gender: '',
          date_of_birth: Date.now(),
        },
        contact_details: {
          phone_number: '',
          email: '',
          website: '',
        },
      },
      step_02: {
        account_details: {
          username: '', password: ''
          },
      },
      step_03: {
        organizations: [
          { organization_id: 1, organization_status: '' },
        ],
      },
    },
  };


  return (
    <PageContainer>
      <StepsForm
        onFinish={async (values) => {
          console.log(values);
          await waitTime(1000);
          onFinishHandlerStepsForm(values);
          message.success('Submitted successfully');
        }}
        formProps={{
          validateMessages: {
            required: 'This is required',
          },
        }}
        submitter={{
          render: (_, dom) => <FooterToolbar>{dom}</FooterToolbar>,
        }}
      >
        <StepsForm.StepForm
          name="profile_details"
          title="Profile Details"
          onFinish={async () => {
            await waitTime(2000);
            return true;
          }}
          layout='vertical'
          grid={true}
          // rowProps={{
          //   gutter: [16],
          // }}
          initialValues={initialValues}
        >
          <ProCard
            title="BIO Details"
            bordered
            headerBordered
            collapsible
            size="default"
            type="default"
            style={{
              marginBlockEnd: 15,
              minWidth: 800,
              maxWidth: '100%',
            }}
            onCollapse={(collapse) => console.log(collapse)}
          >
            <ProForm.Group size={24}>
              <ProFormText
                name={['staff_member', 'step_01', 'bio_details', 'first_name']}
                label="First Name"
                tooltip="The legal name"
                placeholder="please enter your legal name"
                rules={[{ required: true }]}
                fieldProps={{
                  prefix: <UserOutlined />,
                  // size: 'large',

                  onChange: (e) => {
                    console.log('e.target.value');
                    console.log(e.target.value);
                  }
                }}
                colProps={{ xs: 24, sm:24, md: 8, lg: 8, xl: 8 }}
              />
              <ProFormText
                name={['staff_member', 'step_01', 'bio_details', 'middle_name']}
                label="Middle Name"
                tooltip="The legal name"
                placeholder="please enter your legal name"
                rules={[{ required: true }]}
                fieldProps={{
                  prefix: <UserOutlined />,
                  // size: 'large',

                  onChange: (e) => {
                    console.log('e.target.value');
                    console.log(e.target.value);
                  }
                }}
                colProps={{ xs: 24, sm:24, md: 8, lg: 8, xl: 8 }}
              />
              <ProFormText
                name={['staff_member', 'step_01', 'bio_details', 'last_name']}
                label="Last Name"
                tooltip="The legal name"
                placeholder="please enter your legal name"
                rules={[{ required: true }]}
                fieldProps={{
                  prefix: <UserOutlined />,
                  // size: 'large',

                  onChange: (e) => {
                    console.log('e.target.value');
                    console.log(e.target.value);
                  }
                }}
                colProps={{ xs: 24, sm:24, md: 8, lg: 8, xl: 8 }}
              />
            </ProForm.Group>
            <ProForm.Group size={24}>
              <ProFormRadio.Group
                name={['staff_member', 'step_01', 'bio_details', 'gender']}
                label="Gender"
                radioType="button"
                options={[
                  {
                    label: 'Male',
                    value: 'male',
                  },
                  {
                    label: 'Female',
                    value: 'female',
                  },
                  {
                    label: 'Others',
                    value: 'others',
                  },
                ]}
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
              />

              <ProFormDatePicker
                label="Date of Birth"
                name={['staff_member', 'step_01', 'bio_details', 'date_of_birth']}
                // placeholder="5453-763876-7686"
                // maxLength={20}
                // min={1}
                // max={10}
                // fieldProps={{ precision: 0 }}
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
              />
            </ProForm.Group>
          </ProCard>

          <ProCard
            title="Contact Details"
            bordered
            headerBordered
            collapsible
            size="default"
            type="inner"
            style={{
              marginBlockEnd: 15,
              minWidth: 800,
              maxWidth: '100%',
            }}
          >
            <ProForm.Group size={24}>
              <ProFormText
                label="Phone No."
                name={['staff_member', 'step_01', 'contact_details', 'phone_number']}
                placeholder="+2974837487 etc."
                // min={1}
                // max={10}
                fieldProps={{ precision: 0 }}
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
              />
              <ProFormText
                label="Email"
                name={['staff_member', 'step_01', 'contact_details', 'email']}
                tooltip="The legal name of the organization"
                placeholder="info@example.com etc."
                // rules={[{ required: true }]}
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
              />
            </ProForm.Group>
          </ProCard>
        </StepsForm.StepForm>

        <StepsForm.StepForm
          name="account"
          title="Account Details"
          onFinish={async () => {
            await waitTime(2000);
            return true;
          }}
          layout='vertical'
          grid={true}
          // rowProps={{
          //   gutter: [16],
          // }}
          initialValues={initialValues}
        >
          <ProCard
            title="Account Details"
            bordered
            headerBordered
            collapsible
            size="default"
            type="default"
            style={{
              marginBlockEnd: 15,
              minWidth: 800,
              maxWidth: '100%',
            }}
            onCollapse={(collapse) => console.log(collapse)}
          >
            <ProForm.Group title="account" size={24}>
              <ProFormText
                name={['staff_member', 'step_02', 'account_details', 'username']}
                label="Username"
                tooltip="The legal name"
                placeholder="please enter your legal name"
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
              />
              <ProFormText.Password
                name={['staff_member', 'step_02', 'account_details', 'password']}
                label="Password"
                tooltip="The legal name"
                placeholder="please enter your legal name"
                colProps={{ xs: 24, sm:24, md: 12, lg: 12, xl: 12 }}
              />
            </ProForm.Group>
          </ProCard>
        </StepsForm.StepForm>

        <StepsForm.StepForm
          name="organizations"
          title="Organizations"
          onFinish={async () => {
            await waitTime(2000);
            return true;
          }}
          layout='vertical'
          grid={true}
          // rowProps={{
          //   gutter: [16],
          // }}
          initialValues={initialValues}
        >
          <ProCard
            title="Organizations Association:"
            bordered
            headerBordered
            collapsible
            size="default"
            type="default"
            style={{
              marginBlockEnd: 15,
              minWidth: 800,
              maxWidth: '100%',
            }}
            onCollapse={(collapse) => console.log(collapse)}
          >

            {/*Start ProForm Dependency Example*/}
            <ProForm.Group title="Organizations" size={24}>
              <ProFormList
                name={['staff_member', 'step_03', 'organizations']}
              >
                <ProForm.Group key="staff_member_organizations_group" size={24}>
                  <ProFormSelect
                    name='organization_id'
                    label="Organization"
                    colProps={{ xs: 24, sm:24, md: 15, lg: 15, xl: 15 }}
                    // fieldProps={{
                    //   mode: 'tags',
                    // }}
                    options={[
                      {value:1, label:'Organization 01' },
                      {value:2, label:'Organization 02' },
                      {value:3, label:'Organization 03' },
                      {value:4, label:'Organization 04' },
                    ]
                      // .map(({k, v}) => ({
                      //   value: k,
                      //   label: v,
                      // }))
                    }
                  />
                  <ProFormSegmented
                    name="organization_status"
                    label="Status"
                    // valueEnum={{
                    //   open: '未解决',
                    //   closed: '已解决',
                    // }}
                    request={async () => [
                      { label: 'Pending', value: '' },
                      { label: 'Enabled', value: 'enabled' },
                      { label: 'Disabled', value: 'disabled' },
                    ]}
                    rules={[{ required: true, message: 'Please select the staus' }]}
                    colProps={{ xs: 24, sm:24, md: 6, lg: 6, xl: 6 }}
                    onChange={
                      (value) => {
                        console.log('organization_status = value');
                        console.log(value);
                      }
                    }
                  />
                </ProForm.Group>
              </ProFormList>
            </ProForm.Group>
            {/*End ProForm Dependency Example*/}

          </ProCard>
        </StepsForm.StepForm>

      </StepsForm>
    </PageContainer>
  );
};

export default CreateStaffMember;
